#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 

// output to Fragment Shader
out vec3 v_color;

// Uniform
// Values that stay constant for the whole mesh.
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectonTransform;
uniform mat4 NormalTransform;


// Light and Material Uniform Variables
uniform vec4 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ

void main()
{

	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectonTransform * MV;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

	// Transform the normal
	vec3 normal = (NormalTransform * vec4(vertexNormal_modelspace,1)).xyz;
	normal = normalize(normal);
	
	// Eye vector is a vector between the vertex and the camera
	vec3 vertexPositionCameraspace = (MV*vec4(vertexPosition_modelspace,1)).xyz;
	vec3 eyeVector = vec3(0, 0, 0) - vertexPositionCameraspace;
	eyeVector = normalize(eyeVector);
	
	// Light vector is a vector between the light position and the vertex position
	
	// Since WorldLightPosition is a position, make sure it's w component is 1 when we do the transform
	vec4 WorldLightPosition2 = vec4(WorldLightPosition.xyz, 1);
	
	vec3 lightPositionCameraspace = (MV * WorldLightPosition2).xyz;
	
	
	vec4 lightVector = vec4(lightPositionCameraspace - vertexPositionCameraspace, WorldLightPosition.w);

	// @@@@@@@@@@@@@@@@@@ NOW WE DO THE FRAGMENT SHADER STUFF HERE @@@@@@@@@@@@@@@@@@@@@@@@

	float attenuation = 0;

	if (lightVector.w == 0) {
		attenuation = 1;
	}
	else {
		float distance = length((lightVector).xyz);
		attenuation = 1 / (lightAttenuation.x + lightAttenuation.y*distance + lightAttenuation.z*distance*distance);
		//attenuation = 1;
	}
	
	// Calculate ambient
	vec3 ambient = materialCoefficients.x * vertexColor;

	// Calculate diffuse
	vec3 diffuse = materialCoefficients.y * max(0, dot(normal, lightVector.xyz)) * attenuation * vertexColor;
		
	// Compute r
	vec3 l_normalized = normalize((lightVector).xyz);
	//vec3 r = 2*dot(normal, l_normalized)*normal-l_normalized;
	//r = normalize(r);
	
	vec3 r = reflect(-l_normalized.xyz,normal);

	// Compute specular
	vec3 specular = materialCoefficients.z * attenuation * vertexColor;
	float cosTheta = max(0, dot(r, eyeVector));

	/*if (cosTheta > 0.95) {
		color = vec3(0,1,0);
		return;
	}*/

	// For loop for the exponent
	for (int i = 0; i < 5; i++) {
		specular = cosTheta * specular;
	}

	v_color = ambient + diffuse + specular;



	// This should be the final color on the Vertex, including the lighting
	//v_color =  vertexColor;
}
