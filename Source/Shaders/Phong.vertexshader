#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor;

// output to Fragment Shader
out vec3 v_color;

out vec3 normal;          // Transformed normal in View Space
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec4 lightVector;     // Vector from the vertex to the Light in View Space
						  // Length of lightVector is the distance between light and vertex

// Uniform
// Values that stay constant for the whole mesh.
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectonTransform;
uniform mat4 NormalTransform;

// light position
uniform vec4 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light


void main()
{
	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectonTransform * MV;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	v_color = vertexColor;

	// Prepare Data for Fragment Shader
	// Should the normal be transformed?
	normal = (NormalTransform * vec4(vertexNormal_modelspace,1)).xyz;
	normal = normalize(normal);
	
	// Eye vector is a vector between the vertex and the camera
	vec3 vertexPositionCameraspace = (MV*vec4(vertexPosition_modelspace,1)).xyz;
	eyeVector = vec3(0, 0, 0) - vertexPositionCameraspace;
	eyeVector = normalize(eyeVector);
	
	// Light vector is a vector between the light position and the vertex position
	
	// Since WorldLightPosition is a position, make sure it's w component is 1 when we do the transform
	vec4 WorldLightPosition2 = vec4(WorldLightPosition.xyz, 1);
	
	vec3 lightPositionCameraspace = (MV * WorldLightPosition2).xyz;
	
	
	
	
	lightVector = vec4(lightPositionCameraspace - vertexPositionCameraspace, WorldLightPosition.w);

}
